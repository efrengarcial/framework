// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/efrengarcial/framework/users/pkg/model"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0, where, args
func (_m *Repository) Delete(_a0 model.IModel, where string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0, where)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.IModel, string, ...interface{}) error); ok {
		r0 = rf(_a0, where, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: models, where, args
func (_m *Repository) FindAll(models interface{}, where string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, models, where)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(models, where, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: receiver, uint
func (_m *Repository) FindById(receiver model.IModel, uint uint64) error {
	ret := _m.Called(receiver, uint)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.IModel, uint64) error); ok {
		r0 = rf(receiver, uint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindFirst provides a mock function with given fields: receiver, where, args
func (_m *Repository) FindFirst(receiver model.IModel, where string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, receiver, where)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.IModel, string, ...interface{}) error); ok {
		r0 = rf(receiver, where, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: _a0
func (_m *Repository) Insert(_a0 model.IModel) (model.IModel, error) {
	ret := _m.Called(_a0)

	var r0 model.IModel
	if rf, ok := ret.Get(0).(func(model.IModel) model.IModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.IModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.IModel) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecord provides a mock function with given fields: _a0
func (_m *Repository) NewRecord(_a0 model.IModel) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.IModel) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *Repository) Save(_a0 model.IModel) (uint64, error) {
	ret := _m.Called(_a0)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(model.IModel) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.IModel) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 model.IModel) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.IModel) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
