// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "github.com/efrengarcial/framework/internal/domain"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: model
func (_m *Repository) Delete(model domain.IModel) error {
	ret := _m.Called(model)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IModel) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: receiver, id
func (_m *Repository) Find(receiver domain.IModel, id uint64) error {
	ret := _m.Called(receiver, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IModel, uint64) error); ok {
		r0 = rf(receiver, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: result, where, args
func (_m *Repository) FindAll(result interface{}, where string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, result, where)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(result, where, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllPageable provides a mock function with given fields: ctx, pageable, result, where, args
func (_m *Repository) FindAllPageable(ctx context.Context, pageable *domain.Pageable, result interface{}, where string, args ...interface{}) (*domain.Pagination, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, pageable, result, where)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *domain.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pageable, interface{}, string, ...interface{}) *domain.Pagination); ok {
		r0 = rf(ctx, pageable, result, where, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Pagination)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pageable, interface{}, string, ...interface{}) error); ok {
		r1 = rf(ctx, pageable, result, where, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFirst provides a mock function with given fields: receiver, where, args
func (_m *Repository) FindFirst(receiver domain.IModel, where string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, receiver, where)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IModel, string, ...interface{}) error); ok {
		r0 = rf(receiver, where, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneByEmail provides a mock function with given fields: ctx, login
func (_m *Repository) FindOneByEmail(ctx context.Context, login string) (domain.User, error) {
	ret := _m.Called(ctx, login)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByLogin provides a mock function with given fields: ctx, login
func (_m *Repository) FindOneByLogin(ctx context.Context, login string) (domain.User, error) {
	ret := _m.Called(ctx, login)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) GetByEmail(ctx context.Context, email string) (domain.User, error) {
	ret := _m.Called(ctx, email)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByLogin provides a mock function with given fields: ctx, login
func (_m *Repository) GetByLogin(ctx context.Context, login string) (domain.User, error) {
	ret := _m.Called(ctx, login)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, model
func (_m *Repository) Insert(ctx context.Context, model domain.IModel) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IModel) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecord provides a mock function with given fields: model
func (_m *Repository) NewRecord(model domain.IModel) bool {
	ret := _m.Called(model)

	var r0 bool
	if rf, ok := ret.Get(0).(func(domain.IModel) bool); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Save provides a mock function with given fields: model
func (_m *Repository) Save(model domain.IModel) (uint64, error) {
	ret := _m.Called(model)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(domain.IModel) uint64); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.IModel) error); ok {
		r1 = rf(model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: model
func (_m *Repository) Update(model domain.IModel) error {
	ret := _m.Called(model)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IModel) error); ok {
		r0 = rf(model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
